{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  EDIT_SELECTED_LIST: \"EDIT_SELECTED_LIST\",\n  DELETE_SELECTED_LIST: \"DELETE_SELECTED_LIST\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    //own code\n    editListId: null,\n    editListName: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            editListId: null,\n            editListName: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n      //own code\n      //delete or edit selected list\n\n      case GlobalStoreActionType.EDIT_SELECTED_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            editListId: payload._id,\n            editListName: payload.name\n          });\n        }\n\n      case GlobalStoreActionType.DELETE_SELECTED_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.playlist,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: store.listNameActive,\n            editListId: null,\n            editListName: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; //own code\n\n\n  store.createNewList = function () {\n    async function asyncreateNewList() {\n      let request = {\n        name: \"Untitled\",\n        item: []\n      };\n      const response = await api.createPlaylist(request);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n      } else {\n        console.log(\"API FAILED TO CREATE THE LIST\");\n      }\n\n      const response1 = await api.getPlaylistPairs();\n\n      if (response1.data.success) {\n        let pairsArray = response1.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncreateNewList();\n  };\n\n  store.showDeletedListModal = function (idNamePair) {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_SELECTED_LIST,\n      payload: idNamePair\n    });\n    document.getElementById(\"delete-list-modal\").classList.add(\"is-visible\");\n  };\n\n  store.deleteSelectedList = function () {\n    async function asyncdeleteSelectedList() {\n      const response = await api.deletePlaylist(store.editListId);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_SELECTED_LIST,\n          payload: null\n        });\n      } else {\n        console.log(\"API FAILED TO DELETE LIST\");\n      }\n    }\n\n    asyncdeleteSelectedList();\n  };\n\n  store.cancelDeleteList = function () {\n    store.loadIdNamePairs();\n  };\n  /*\r\n      store.getListName=function(id){\r\n          async function asyncGetList(id) {\r\n              let response = await api.getPlaylistById(id);\r\n              if (response.data.success) {\r\n                  return response.data.playlist.name;\r\n              }\r\n              else{\r\n                  return \"x\";\r\n              }\r\n          }\r\n          asyncGetList(id);\r\n      }\r\n  */\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"w6EfLgEXTLN1S7zEYpF+25k3Z2w=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","EDIT_SELECTED_LIST","DELETE_SELECTED_LIST","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","editListId","editListName","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","_id","name","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playist","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","createNewList","asyncreateNewList","request","item","createPlaylist","response1","showDeletedListModal","idNamePair","document","getElementById","classList","add","deleteSelectedList","asyncdeleteSelectedList","deletePlaylist","cancelDeleteList","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["C:/Users/natur/CSE316_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    EDIT_SELECTED_LIST:\"EDIT_SELECTED_LIST\",\r\n    DELETE_SELECTED_LIST:\"DELETE_SELECTED_LIST\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n\r\n        //own code\r\n        editListId:null,\r\n        editListName:null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    editListId:null,\r\n                    editListName:null\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true\r\n                });\r\n            }\r\n\r\n            //own code\r\n            //delete or edit selected list\r\n            case GlobalStoreActionType.EDIT_SELECTED_LIST:{\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.listNameActive,\r\n                    editListId:payload._id,\r\n                    editListName:payload.name\r\n                });\r\n            }\r\n            case GlobalStoreActionType.DELETE_SELECTED_LIST:{\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.playlist,\r\n                    newListCounter: store.newListCounter-1,\r\n                    listNameActive: store.listNameActive,\r\n                    editListId:null,\r\n                    editListName:null\r\n                });\r\n            }\r\n\r\n\r\n\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n\r\n\r\n    //own code\r\n    store.createNewList= function(){\r\n        async function asyncreateNewList() {\r\n                    let request={name:\"Untitled\", item:[]};\r\n                    const response = await api.createPlaylist(request);\r\n                    if (response.data.success) {\r\n                        let playlist = response.data.playlist;\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                            payload: playlist\r\n                        });\r\n                    }\r\n                    else {\r\n                        console.log(\"API FAILED TO CREATE THE LIST\");\r\n                    }\r\n                    const response1 = await api.getPlaylistPairs();\r\n                    if (response1.data.success) {\r\n                        let pairsArray = response1.data.idNamePairs;\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                            payload: pairsArray\r\n                        });\r\n                    }\r\n                    else {\r\n                        console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n                    }\r\n        }\r\n                asyncreateNewList();\r\n    }\r\n    \r\n    store.showDeletedListModal=function(idNamePair){\r\n        storeReducer({\r\n            type:GlobalStoreActionType.EDIT_SELECTED_LIST,\r\n            payload:idNamePair\r\n        });\r\n        document.getElementById(\"delete-list-modal\").classList.add(\"is-visible\");\r\n    }\r\n\r\n    store.deleteSelectedList = function(){\r\n        async function asyncdeleteSelectedList(){\r\n            const response= await api.deletePlaylist(store.editListId);\r\n            if(response.data.success){\r\n                store.loadIdNamePairs();\r\n                storeReducer({\r\n                    type:GlobalStoreActionType.DELETE_SELECTED_LIST,\r\n                    payload:null\r\n                })\r\n               \r\n            }\r\n            else{\r\n                console.log(\"API FAILED TO DELETE LIST\");\r\n            }\r\n        }\r\n        asyncdeleteSelectedList();\r\n        \r\n    }\r\n    store.cancelDeleteList = function(){\r\n        store.loadIdNamePairs();\r\n      \r\n    }\r\n    \r\n/*\r\n    store.getListName=function(id){\r\n        async function asyncGetList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                return response.data.playlist.name;\r\n            }\r\n            else{\r\n                return \"x\";\r\n            }\r\n        }\r\n        asyncGetList(id);\r\n    }\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}